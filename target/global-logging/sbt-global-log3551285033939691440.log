[0m[[0m[0mdebug[0m] [0m[0m> Exec(console, Some(12182a6b-4f7d-48ec-a457-1b802c3b214d), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / console[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 7 Scala sources to E:\Universidad\IngenierÃ­a de Sistemas\3 - Tercer Semestre\Fund. Prog. Funcional y Concurrente\ProyectoFPFC\target\scala-3.3.3\classes ...[0m
[0m[[0m[31merror[0m] [0m[0m[31m[31m-- [E106] Naming Error: E:\Universidad\IngenierÃ­a de Sistemas\3 - Tercer Semestre\Fund. Prog. Funcional y Concurrente\ProyectoFPFC\src\main\scala\ItinerariosPar\package.scala:9:0 [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m  9 |[0m[33mpackage[0m [33mobject[0m ItinerariosPar{[0m
[0m[[0m[31merror[0m] [0m[0m[31m[31m    |[0m^[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m    |[0mItinerariosPar is the name of [33mobject[0m [35mItinerariosPar[0m in E:\Universidad\IngenierÃ­a de Sistemas\3 - Tercer Semestre\Fund. Prog. Funcional y Concurrente\ProyectoFPFC\src\main\scala\ItinerariosPar\package2.scala.[0m
[0m[[0m[31merror[0m] [0m[0m[31m    |[0mIt cannot be used at the same time as the name of a package.[0m
[0m[[0m[31merror[0m] [0m[0m[31m 10 |[0m   [0m
[0m[[0m[31merror[0m] [0m[0m[31m 11 |[0m  [33mcase class[0m Aeropuerto (Cod: String , X: Int , Y: Int , GMT: Int )[0m
[0m[[0m[31merror[0m] [0m[0m[31m 12 |[0m  [34m/*(Cod:CÃ³digo del Aeropuerto, X:Coordenada en X, Y:Coordenada en Y, [0m
[0m[[0m[31merror[0m] [0m[0m[31m 13 |[0m  GMT: Entero que representa la hora)*/[0m
[0m[[0m[31merror[0m] [0m[0m[31m 14 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 15 |[0m  [33mcase class[0m Vuelo (Aln: String , Num: Int , Org: String , HS: Int , MS: Int , Dst: String , HL: Int , ML: Int , Esc: Int )[0m
[0m[[0m[31merror[0m] [0m[0m[31m 16 |[0m  [34m/*(Aln: Nombre AerolÃ­nea, Num: NÃºmero de Vuelo, Org: CÃ³digo de Aeropuerto de Origen,[0m
[0m[[0m[31merror[0m] [0m[0m[31m 17 |[0m  HS: Hora (hh) local de salida, MS: Minutos (mm) de hora local de salida,[0m
[0m[[0m[31merror[0m] [0m[0m[31m 18 |[0m  Dst: CÃ³digo de Aeropuerto de destino, HL: Hora (hh) local de llegada, [0m
[0m[[0m[31merror[0m] [0m[0m[31m 19 |[0m  ML: Minutos (mm) de hora local de llegada, Esc: NÃºmero de escalas (mismo aviÃ³n))*/[0m
[0m[[0m[31merror[0m] [0m[0m[31m 20 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 21 |[0m  [0m
[0m[[0m[31merror[0m] [0m[0m[31m 22 |[0m  [33mtype[0m Itinerario = List[Vuelo][0m
[0m[[0m[31merror[0m] [0m[0m[31m 23 |[0m  [34m//---------------USE LA FUNCION ITINERARIO SEC POR QUE AUN NO ESTABA LA PARALELA------------------------[0m
[0m[[0m[31merror[0m] [0m[0m[31m 24 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 25 |[0m  [33mdef[0m itinerariosPar(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String) => List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 26 |[0m    [33mdef[0m generarItinerario(cod1: String, cod2: String, visitados: Set[String], vuelosRestantes: List[Vuelo]): List[Itinerario] = vuelosRestantes.flatMap {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 27 |[0m      [33mcase[0m vuelo [33mif[0m vuelo.Org == cod1 && vuelo.Dst == cod2 && !visitados.contains(vuelo.Dst) =>[0m
[0m[[0m[31merror[0m] [0m[0m[31m 28 |[0m        List(List(vuelo))[0m
[0m[[0m[31merror[0m] [0m[0m[31m 29 |[0m      [33mcase[0m vuelo [33mif[0m vuelo.Org == cod1 && !visitados.contains(vuelo.Dst) =>[0m
[0m[[0m[31merror[0m] [0m[0m[31m 30 |[0m        [33mval[0m nuevosVisitados = visitados + vuelo.Org[0m
[0m[[0m[31merror[0m] [0m[0m[31m 31 |[0m        generarItinerario(vuelo.Dst, cod2, nuevosVisitados, vuelos.filterNot(_ == vuelo)).map(vuelo :: _)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 32 |[0m      [33mcase[0m _ => List.empty[0m
[0m[[0m[31merror[0m] [0m[0m[31m 33 |[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 34 |[0m    (cod1: String, cod2: String) => generarItinerario(cod1, cod2, Set.empty, vuelos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 35 |[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 36 |[0m  [34m/** Dada una lista de todos los vuelos disponibles y una lista [0m
[0m[[0m[31merror[0m] [0m[0m[31m 37 |[0m    * de todos los aeropuertos, crea una funciÃ³n que calcula de manera paralela todos[0m
[0m[[0m[31merror[0m] [0m[0m[31m 38 |[0m    * los itinearios entre 2 aerpuertos que recibe como parÃ¡metro[0m
[0m[[0m[31merror[0m] [0m[0m[31m 39 |[0m    * @param vuelos Lista de todos los vuelos disponibles[0m
[0m[[0m[31merror[0m] [0m[0m[31m 40 |[0m    * @param aeropuertos Lista de todos los aeropuertos[0m
[0m[[0m[31merror[0m] [0m[0m[31m 41 |[0m    * @return FunciÃ³n que recibe dos cÃ³digos de aeropuerto cod1 y cod2, y retorna[0m
[0m[[0m[31merror[0m] [0m[0m[31m 42 |[0m    * todos los itinerarios entre los dos aeropuertos[0m
[0m[[0m[31merror[0m] [0m[0m[31m 43 |[0m    */[0m
[0m[[0m[31merror[0m] [0m[0m[31m 44 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 45 |[0m  [34m/*def itinerariosPar(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String) => List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 46 |[0m    def generarItinerario(cod1: String, cod2: String, visitados: Set[String], vuelosRestantes: List[Vuelo]): List[Itinerario] = vuelosRestantes.flatMap {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 47 |[0m      case vuelo if vuelo.Org == cod1 && vuelo.Dst == cod2 && !visitados.contains(vuelo.Dst) =>[0m
[0m[[0m[31merror[0m] [0m[0m[31m 48 |[0m        List(List(vuelo))[0m
[0m[[0m[31merror[0m] [0m[0m[31m 49 |[0m      case vuelo if vuelo.Org == cod1 && !visitados.contains(vuelo.Dst) =>[0m
[0m[[0m[31merror[0m] [0m[0m[31m 50 |[0m        val nuevosVisitados = visitados + vuelo.Org[0m
[0m[[0m[31merror[0m] [0m[0m[31m 51 |[0m        generarItinerario(vuelo.Dst, cod2, nuevosVisitados, vuelos.filterNot(_ == vuelo)).map(vuelo :: _)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 52 |[0m      case _ => List.empty[0m
[0m[[0m[31merror[0m] [0m[0m[31m 53 |[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 54 |[0m    (cod1: String, cod2: String) => generarItinerario(cod1, cod2, Set.empty, vuelos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 55 |[0m  }*/[0m
[0m[[0m[31merror[0m] [0m[0m[31m 56 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 57 |[0m  [34m/** Dada una lista de todos los vuelos disponibles y una lista [0m
[0m[[0m[31merror[0m] [0m[0m[31m 58 |[0m    * de todos los aeropuertos, crea una funciÃ³n que calcula de manera paralela los 3 (si los hay) [0m
[0m[[0m[31merror[0m] [0m[0m[31m 59 |[0m    * itinerarios que minimizan el tiempo de viaje[0m
[0m[[0m[31merror[0m] [0m[0m[31m 60 |[0m    * @param vuelos Lista de todos los vuelos disponibles[0m
[0m[[0m[31merror[0m] [0m[0m[31m 61 |[0m    * @param aeropuertos Lista de todos los aeropuertos[0m
[0m[[0m[31merror[0m] [0m[0m[31m 62 |[0m    * @return FunciÃ³n que recibe dos cÃ³digos de aeropuerto c1 y c2, y retorna[0m
[0m[[0m[31merror[0m] [0m[0m[31m 63 |[0m    * una lista de itinerarios[0m
[0m[[0m[31merror[0m] [0m[0m[31m 64 |[0m    */[0m
[0m[[0m[31merror[0m] [0m[0m[31m 65 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 66 |[0m  [0m
[0m[[0m[31merror[0m] [0m[0m[31m 67 |[0m  [33mdef[0m itinerariosTiempoPar(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String) => List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 68 |[0m    [33mval[0m listaIt = itinerariosPar(vuelos,aeropuertos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 69 |[0m    [33mdef[0m buscarItinerarios(cod1: String, cod2: String): List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 70 |[0m      [33mdef[0m tiempoItinerario (it:Itinerario, arpt:List[Aeropuerto]): Int = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 71 |[0m        [33mval[0m vInicio = it.head[0m
[0m[[0m[31merror[0m] [0m[0m[31m 72 |[0m        [33mval[0m vFin = it.last[0m
[0m[[0m[31merror[0m] [0m[0m[31m 73 |[0m        [33mval[0m GMTSalida = ([33mfor[0m(a <- arpt [33mif[0m vInicio.Org == a.Cod) [33myield[0m a).head.GMT[0m
[0m[[0m[31merror[0m] [0m[0m[31m 74 |[0m        [33mval[0m GMTLlegada = ([33mfor[0m(a <- arpt [33mif[0m vFin.Dst == a.Cod) [33myield[0m a).head.GMT[0m
[0m[[0m[31merror[0m] [0m[0m[31m 75 |[0m        [33mval[0m hSalida  = (vInicio.HS - (GMTSalida/[31m100[0m)*[31m60[0m) + vInicio.MS[0m
[0m[[0m[31merror[0m] [0m[0m[31m 76 |[0m        [33mval[0m hLlegada = (vFin.HS - (GMTLlegada/[31m100[0m)*[31m60[0m) + vFin.MS[0m
[0m[[0m[31merror[0m] [0m[0m[31m 77 |[0m        [0m
[0m[[0m[31merror[0m] [0m[0m[31m 78 |[0m        [33mif[0m (hLlegada <= hSalida) (hLlegada+([31m60[0m*[31m24[0m)-hSalida)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 79 |[0m        [33melse[0m (hLlegada-hSalida)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 80 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 81 |[0m      [33mdef[0m ordenarPorTiempo(itinerarios:List[Itinerario],arpts:List[Aeropuerto]):List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m 82 |[0m        itinerarios.sortBy(iti => tiempoItinerario(iti,arpts))[0m
[0m[[0m[31merror[0m] [0m[0m[31m 83 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 84 |[0m      [33mval[0m listaEntre = listaIt(cod1, cod2)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 85 |[0m      [33mif[0m (listaEntre.length<=[31m3[0m)(listaEntre)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 86 |[0m      [33melse[0m{[0m
[0m[[0m[31merror[0m] [0m[0m[31m 87 |[0m        [33mval[0m sizePart = (listaEntre.size + [31m3[0m)/[31m4[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m 88 |[0m        [33mval[0m (part1,part2,part3,part4) = parallel([0m
[0m[[0m[31merror[0m] [0m[0m[31m 89 |[0m            task(ordenarPorTiempo(listaEntre.slice([31m0[0m,sizePart),aeropuertos).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m 90 |[0m            task(ordenarPorTiempo(listaEntre.slice(sizePart,[31m2[0m*sizePart),aeropuertos).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m 91 |[0m            task(ordenarPorTiempo(listaEntre.slice([31m2[0m*sizePart,[31m3[0m*sizePart),aeropuertos).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m 92 |[0m            task(ordenarPorTiempo(listaEntre.slice([31m3[0m*sizePart,listaEntre.size),aeropuertos).take([31m3[0m)).join[0m
[0m[[0m[31merror[0m] [0m[0m[31m 93 |[0m        )[0m
[0m[[0m[31merror[0m] [0m[0m[31m 94 |[0m        [33mval[0m listaMenorTiempo = (part1++part2++part3++part4).sortBy(iti => tiempoItinerario(iti,aeropuertos)).take([31m3[0m)[0m
[0m[[0m[31merror[0m] [0m[0m[31m 95 |[0m        listaMenorTiempo[0m
[0m[[0m[31merror[0m] [0m[0m[31m 96 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 97 |[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m[31m 98 |[0m    buscarItinerarios[0m
[0m[[0m[31merror[0m] [0m[0m[31m 99 |[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m[31m100 |[0m  [0m
[0m[[0m[31merror[0m] [0m[0m[31m101 |[0m  [34m/** Dada una lista de todos los vuelos disponibles y una lista [0m
[0m[[0m[31merror[0m] [0m[0m[31m102 |[0m    * de todos los aeropuertos, crea una funciÃ³n que calcula de manera paralela los 3 (si los hay) [0m
[0m[[0m[31merror[0m] [0m[0m[31m103 |[0m    * itinerarios que minimizan el nÃºmero de cambios de aviÃ³n[0m
[0m[[0m[31merror[0m] [0m[0m[31m104 |[0m    * @param vuelos Lista de todos los vuelos disponibles[0m
[0m[[0m[31merror[0m] [0m[0m[31m105 |[0m    * @param aeropuertos Lista de todos los aeropuertos[0m
[0m[[0m[31merror[0m] [0m[0m[31m106 |[0m    * @return FunciÃ³n que recibe dos cÃ³digos de aeropuerto c1 y c2, y retorna[0m
[0m[[0m[31merror[0m] [0m[0m[31m107 |[0m    * una lista de itinerarios[0m
[0m[[0m[31merror[0m] [0m[0m[31m108 |[0m    */[0m
[0m[[0m[31merror[0m] [0m[0m[31m109 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m110 |[0m  [33mdef[0m itinerariosEscalasPar(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String) => List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m111 |[0m    [33mval[0m itinerariosEntre =  itinerariosPar(vuelos,aeropuertos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m112 |[0m    [33mdef[0m encontrarMenorEsc (cod1 : String, cod2 : String): List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m113 |[0m      [33mval[0m itinerariosTotales = itinerariosEntre(cod1,cod2)[34m//Halla todos los itinerarios entre el aerocpuerto cod1 y cod2[0m
[0m[[0m[31merror[0m] [0m[0m[31m114 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m115 |[0m      [0m
[0m[[0m[31merror[0m] [0m[0m[31m116 |[0m      [33mif[0m (itinerariosTotales.size <= [31m3[0m) itinerariosTotales [0m
[0m[[0m[31merror[0m] [0m[0m[31m117 |[0m      [33melse[0m {[0m
[0m[[0m[31merror[0m] [0m[0m[31m118 |[0m        [33mval[0m tamaÃ±oParticion = (itinerariosTotales.size + [31m3[0m)/[31m4[0m  [34m//sumamos 3 para que se redonde hacia arriba[0m
[0m[[0m[31merror[0m] [0m[0m[31m119 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m120 |[0m        [33mval[0m particion1 = itinerariosTotales.slice([31m0[0m,tamaÃ±oParticion)[0m
[0m[[0m[31merror[0m] [0m[0m[31m121 |[0m        [33mval[0m particion2 = itinerariosTotales.slice(tamaÃ±oParticion,[31m2[0m*tamaÃ±oParticion)[0m
[0m[[0m[31merror[0m] [0m[0m[31m122 |[0m        [33mval[0m particion3 = itinerariosTotales.slice([31m2[0m*tamaÃ±oParticion,[31m3[0m*tamaÃ±oParticion)[0m
[0m[[0m[31merror[0m] [0m[0m[31m123 |[0m        [33mval[0m particion4 = itinerariosTotales.slice([31m3[0m*tamaÃ±oParticion,itinerariosTotales.size)[0m
[0m[[0m[31merror[0m] [0m[0m[31m124 |[0m        [33mdef[0m ordenarPorEscala(itinearios:List[Itinerario]): List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m125 |[0m          itinearios.sortBy(iti => ( iti.map(_.Esc)).sum + (iti.size -[31m1[0m))[0m
[0m[[0m[31merror[0m] [0m[0m[31m126 |[0m        }[0m
[0m[[0m[31merror[0m] [0m[0m[31m127 |[0m        [33mval[0m (part1Ord:List[Itinerario], part2Ord:List[Itinerario], part3Ord:List[Itinerario], part4Ord:List[Itinerario]) = parallel([0m
[0m[[0m[31merror[0m] [0m[0m[31m128 |[0m          task(ordenarPorEscala(particion1).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m129 |[0m          task(ordenarPorEscala(particion2).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m130 |[0m          task(ordenarPorEscala(particion3).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m131 |[0m          task(ordenarPorEscala(particion4).take([31m3[0m)).join[0m
[0m[[0m[31merror[0m] [0m[0m[31m132 |[0m        )[0m
[0m[[0m[31merror[0m] [0m[0m[31m133 |[0m        [33mval[0m listaMenorEsc = ordenarPorEscala(part1Ord ++ part2Ord ++ part3Ord ++ part4Ord).take([31m3[0m)[0m
[0m[[0m[31merror[0m] [0m[0m[31m134 |[0m        listaMenorEsc[0m
[0m[[0m[31merror[0m] [0m[0m[31m135 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m136 |[0m    }   [0m
[0m[[0m[31merror[0m] [0m[0m[31m137 |[0m    encontrarMenorEsc[0m
[0m[[0m[31merror[0m] [0m[0m[31m138 |[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m[31m139 |[0m  [34m/** Dada una lista de todos los vuelos disponibles y una lista [0m
[0m[[0m[31merror[0m] [0m[0m[31m140 |[0m    * de todos los aeropuertos, crea una funciÃ³n que calcula de manera paralela los 3 (si los hay) [0m
[0m[[0m[31merror[0m] [0m[0m[31m141 |[0m    * itinerarios que minimizan el tiempo de en el aire[0m
[0m[[0m[31merror[0m] [0m[0m[31m142 |[0m    * @param vuelos Lista de todos los vuelos disponibles[0m
[0m[[0m[31merror[0m] [0m[0m[31m143 |[0m    * @param aeropuertos Lista de todos los aeropuertos[0m
[0m[[0m[31merror[0m] [0m[0m[31m144 |[0m    * @return FunciÃ³n que recibe dos cÃ³digos de aeropuerto c1 y c2, y retorna[0m
[0m[[0m[31merror[0m] [0m[0m[31m145 |[0m    * una lista de itinerarios[0m
[0m[[0m[31merror[0m] [0m[0m[31m146 |[0m    */[0m
[0m[[0m[31merror[0m] [0m[0m[31m147 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m148 |[0m    [33mdef[0m itinerariosAire(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String) => List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m149 |[0m    [33mval[0m listaIt = itinerariosPar(vuelos,aeropuertos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m150 |[0m    [33mdef[0m buscarItinerarios(cod1: String, cod2: String): List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m151 |[0m      [33mdef[0m horaGMT (v:Vuelo, arpt:List[Aeropuerto]): (Int,Int) ={[0m
[0m[[0m[31merror[0m] [0m[0m[31m152 |[0m        [33mval[0m GMTSalida = ([33mfor[0m(a <- arpt [33mif[0m v.Org == a.Cod) [33myield[0m a).head.GMT[0m
[0m[[0m[31merror[0m] [0m[0m[31m153 |[0m        [33mval[0m GMTLlegada = ([33mfor[0m(a <- arpt [33mif[0m v.Dst == a.Cod) [33myield[0m a).head.GMT[0m
[0m[[0m[31merror[0m] [0m[0m[31m154 |[0m        [33mval[0m hSalida  = ((v.HS - (GMTSalida/[31m100[0m))*[31m60[0m) + v.MS[0m
[0m[[0m[31merror[0m] [0m[0m[31m155 |[0m        [33mval[0m hLlegada = ((v.HL - (GMTLlegada/[31m100[0m))*[31m60[0m) + v.ML[0m
[0m[[0m[31merror[0m] [0m[0m[31m156 |[0m        [33mif[0m (hLlegada <= hSalida) (hSalida,hLlegada+([31m60[0m*[31m24[0m)) [33melse[0m (hSalida,hLlegada)[0m
[0m[[0m[31merror[0m] [0m[0m[31m157 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m158 |[0m      [33mdef[0m ordenarPorAire(itinerarios:List[Itinerario],arpt:List[Aeropuerto]):List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m159 |[0m        itinerarios.sortBy(iti => ([33mfor[0m (v <- iti) [33myield[0m((horaGMT(v,arpt)._2 - horaGMT(v,arpt)._1))).sum)[0m
[0m[[0m[31merror[0m] [0m[0m[31m160 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m161 |[0m      [33mval[0m listaEntre = listaIt(cod1, cod2)[0m
[0m[[0m[31merror[0m] [0m[0m[31m162 |[0m      [33mif[0m (listaEntre.length<=[31m3[0m)(listaEntre)[0m
[0m[[0m[31merror[0m] [0m[0m[31m163 |[0m      [33melse[0m{[0m
[0m[[0m[31merror[0m] [0m[0m[31m164 |[0m        [33mval[0m sizePart = (listaEntre.size + [31m3[0m)/[31m4[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m165 |[0m        [33mval[0m (part1,part2,part3,part4) = parallel([0m
[0m[[0m[31merror[0m] [0m[0m[31m166 |[0m          task(ordenarPorAire(listaEntre.slice([31m0[0m,sizePart),aeropuertos).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m167 |[0m          task(ordenarPorAire(listaEntre.slice(sizePart,[31m2[0m*sizePart),aeropuertos).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m168 |[0m          task(ordenarPorAire(listaEntre.slice([31m2[0m*sizePart,[31m3[0m*sizePart),aeropuertos).take([31m3[0m)).join,[0m
[0m[[0m[31merror[0m] [0m[0m[31m169 |[0m          task(ordenarPorAire(listaEntre.slice([31m3[0m*sizePart,listaEntre.size),aeropuertos).take([31m3[0m)).join[0m
[0m[[0m[31merror[0m] [0m[0m[31m170 |[0m        )[0m
[0m[[0m[31merror[0m] [0m[0m[31m171 |[0m        [0m
[0m[[0m[31merror[0m] [0m[0m[31m172 |[0m        [33mval[0m listaMenorAire = ordenarPorAire((part1++part2++part3++part4),aeropuertos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m173 |[0m        listaMenorAire          [0m
[0m[[0m[31merror[0m] [0m[0m[31m174 |[0m      }[0m
[0m[[0m[31merror[0m] [0m[0m[31m175 |[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m[31m176 |[0m    buscarItinerarios[0m
[0m[[0m[31merror[0m] [0m[0m[31m177 |[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m[31m178 |[0m  [33mdef[0m itinerariosAirePar(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String) => List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m179 |[0m    [33mdef[0m buscarItinerarios(cod1: String, cod2: String): List[Itinerario] = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m180 |[0m      List.empty[Itinerario][0m
[0m[[0m[31merror[0m] [0m[0m[31m181 |[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m[31m182 |[0m    buscarItinerarios    [0m
[0m[[0m[31merror[0m] [0m[0m[31m183 |[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m[31m184 |[0m  [34m/** Dada una lista de todos los vuelos disponibles y una lista [0m
[0m[[0m[31merror[0m] [0m[0m[31m185 |[0m    * de todos los aeropuertos, crea una funciÃ³n que calcula de manera paralela[0m
[0m[[0m[31merror[0m] [0m[0m[31m186 |[0m    * un itineario que optimiza la hora de salida para llegar a tiempo a la cita[0m
[0m[[0m[31merror[0m] [0m[0m[31m187 |[0m    * @param vuelos Lista de todos los vuelos disponibles[0m
[0m[[0m[31merror[0m] [0m[0m[31m188 |[0m    * @param aeropuertos Lista de todos los aeropuertos[0m
[0m[[0m[31merror[0m] [0m[0m[31m189 |[0m    * @return FunciÃ³n que recibe dos cÃ³digos de aeropuerto c1 y c2 y una hora de[0m
[0m[[0m[31merror[0m] [0m[0m[31m190 |[0m    * cita en c2 h:m, y retorna un itinerario[0m
[0m[[0m[31merror[0m] [0m[0m[31m191 |[0m    */[0m
[0m[[0m[31merror[0m] [0m[0m[31m192 |[0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m193 |[0m  [33mdef[0m itinerariosSalidaPar(vuelos: List[Vuelo], aeropuertos: List[Aeropuerto]): (String, String,Int,Int) => Itinerario = {[0m
[0m[[0m[31merror[0m] [0m[0m[31m194 |[0m    [33mval[0m listaIt = itinerariosPar(vuelos,aeropuertos)[0m
[0m[[0m[31merror[0m] [0m[0m[31m195 |[0m    [33mdef[0m calcularItinerario(cod1:String, cod2:String, HC:Int ,MC:Int):Itinerario={[0m
[0m[[0m[31merror[0m] [0m[0m[31m196 |[0m      [33mval[0m listaEntre = listaIt(cod1, cod2)[0m
[0m[[0m[31merror[0m] [0m[0m[31m197 |[0m      [33mval[0m listaCita = listaEntre.filter(itinerario => (((itinerario.last.HL*[31m60[0m)+itinerario.last.ML)<=((HC*[31m60[0m)+MC)))[0m
[0m[[0m[31merror[0m] [0m[0m[31m198 |[0m      [33mif[0m (listaCita.isEmpty)(List.empty[Vuelo])[0m
[0m[[0m[31merror[0m] [0m[0m[31m199 |[0m      [33melse[0m ((listaCita.sortBy(itinerario => (itinerario.head.HS+itinerario.head.MS))).last)[0m
[0m[[0m[31merror[0m] [0m[0m[31m200 |[0m    }[0m
[0m[[0m[31merror[0m] [0m[0m[31m201 |[0m    calcularItinerario[0m
[0m[[0m[31merror[0m] [0m[0m[31m202 |[0m  }[0m
[0m[[0m[31merror[0m] [0m[0m[31m203 |[0m}[0m
[0m[[0m[31merror[0m] [0m[0m[31m    |[0m[0m
[0m[[0m[31merror[0m] [0m[0m[31m    |[0m longer explanation available when compiling with `-explain`[0m
[0m[[0m[31merror[0m] [0m[0mone error found[0m
[0m[[0m[31merror[0m] [0m[0m(Compile / [31mcompileIncremental[0m) Compilation failed[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 9 s, completed 25/05/2024, 12:23:02â¯p.â¯m.[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
